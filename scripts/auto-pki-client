#!/usr/bin/env python

import os
import argparse
import sys
import logging
import socket
import signal
import pyqrcode
from time import sleep
from OpenSSL import crypto

from est.client import Client
from est.errors import TryLater, RequestError

from auto_pki_client.configuration.config import Config
from auto_pki_client.aux.crypto import *
from auto_pki_client.aux.discovery import get_est_services

parser = argparse.ArgumentParser(
    description="Start Auto-PKI client"
)
parser.add_argument(
    '--serial-number', '-s',
    help="Serial number of device.",
    default="serialnumber._serial.vendor.com",
    type=str
)
parser.add_argument(
    '--config', '-c',
    help="Path to config file YAML.",
    default="./config/config.yaml",
    type=str
)
parser.add_argument(
    '--re-discovery',
    help="Force to rediscover all services.",
    action='store_true'
)
parser.add_argument(
    '--wait-for-cert',
    help="Wait for EST server to get the certificate",
    action='store_true'
)
parser.add_argument(
    '--verbose', '-v',
    default= 0,
    action='count'
)
parser.add_argument(
    '--quiet', '-q',
    action='store_true'
)
parser.add_argument(
    '--force', '-f',
    help="Force to do any action",
    action='store_true'
)

args = parser.parse_args(sys.argv[1:])

args.verbose += (0,1)[not args.quiet]
if args.verbose > 3:
    args.verbose = 3

log_level = (logging.ERROR, logging.WARNING, logging.INFO, logging.DEBUG)[args.verbose]
logging.basicConfig(level=log_level)
logging.getLogger('zeroconf').setLevel(log_level)
logging.getLogger('request').setLevel(log_level)

log = logging.getLogger('auto_pki_client')
log.setLevel(log_level)

def _exit_handler(signum, frame):
    log.info("Force exit.")
    sys.exit()

signal.signal(signal.SIGTERM, _exit_handler)
signal.signal(signal.SIGINT, _exit_handler)

def discovery_est(conf):
    services = get_est_services()
    for service in services:
        log.info("Found EST Service %s on %s:%d ", service.server, service.address, service.port)

    if len(services) == 0:
        log.error("No EST Service found in .local domain")
        sys.exit(1)

    service = services[0]

    log.info("Configuring EST Service %s:%d", service.server, service.port)
    srv_cfg['host'] = service.server
    srv_cfg['port'] = service.port

def log_cert_info(cert):
    issuer = cert.get_issuer()
    subject = cert.get_subject()
    not_after = cert.get_notAfter()
    not_before = cert.get_notBefore()

    log.info("CERT INFO: ")
    log.info(
        "\tIssuer:\tC=%s,ST=%s,L=%s,O=%s,OU=%s,CN=%s",
        issuer.C, issuer.ST, issuer.L, issuer.O, issuer.OU, issuer.CN
    )
    log.info(
        "\tSubject:\tC=%s,ST=%s,L=%s,O=%s,OU=%s,CN=%s",
        subject.C, subject.ST, subject.L, subject.O, subject.OU, subject.CN
    )
    log.info("\tNot before:\t%s", not_before)
    log.info("\tNot after:\t%s", not_after)

with Config(args.config) as conf:
    cli_cfg = conf['client']
    srv_cfg = conf['server']

    common_name = socket.getfqdn()

    if not 'serial_number' in cli_cfg or args.force:
        cli_cfg['serial_number'] = args.serial_number

    device_sn = cli_cfg['serial_number']
    csr_path = os.path.join(cli_cfg['certs_dir'], common_name+'.csr')
    cert_path = os.path.join(cli_cfg['certs_dir'], common_name+'.pem')
    priv_path = os.path.join(cli_cfg['certs_dir'], common_name+'.key.pem')
    exported_path = os.path.join(cli_cfg['certs_dir'], common_name+'.pfx')

    if os.path.isfile(cert_path) and os.path.isfile(priv_path):
        log.error("Skip generate Client Cert. Certificate already present in %s", cert_path)
        sys.exit()

    try:
        os.makedirs(cli_cfg['certs_dir'])
        log.info("Certificate's directory created on %s", cli_cfg['certs_dir'])
    except (IOError, OSError) as e:
        pass

    cacert_path = os.path.join(cli_cfg['certs_dir'], srv_cfg['cacert'])
    cacert = (False, cacert_path)[os.path.isfile(cacert_path)]

    if args.re_discovery:
        discovery_est(conf)

    try:
        host = srv_cfg['host']
        port = srv_cfg['port']
    except (KeyError) as ex:
        discovery_est(conf)
        host = srv_cfg['host']
        port = srv_cfg['port']

    client = Client(host, port, cacert)

    if not cacert:
        log.debug("Cacert is not present. Initial bootstraping.")
        cacert_str = client.cacerts()
        log.debug("Received cacert %s", cacert_str)
        with open(cacert_path, 'w') as cacert_file:
            cacert_file.write(cacert_str)
            log.debug("cacert writed to file %s", cacert_path)

        cacert_info = get_cert_info(cacert_path)
        log.info("Initial cacert bootstraping completed.")
        log_cert_info(cacert_info)

        cacert_fingerprint = fingerprint(cacert_info)
        log.warn(
            "Adding CA. Fingerprint: %s\n",
            cacert_fingerprint
        )

        client = Client(host, port, cacert_path)

    username = cli_cfg['username']
    password = cli_cfg['password']

    client.set_basic_auth(username, password)

    if os.path.isfile(csr_path):
        log.info("Found previous CSR in %s", csr_path)
        try:
            with open(csr_path, 'r') as cert_file:
                csr = cert_file.read()
        except (OSError) as ex:
            log.error("Failed to read CSR file from %s. ERROR: %s", csr_path, ex.message)
            sys.exit(1)
    else:
        # Create CSR and get private key used to sign the CSR.
        log.info("Generating client CSR...(RSA,2048)")
        priv, csr = client.create_csr(common_name, subject_alt_name=b"DNS:"+device_sn)

        csr_obj = crypto.load_certificate_request(crypto.FILETYPE_PEM, csr)

        csr_fingerprint = fingerprint(csr_obj)
        log.warn(
            "Client. Fingerprint: %s\n\n%s\n",
            csr_fingerprint,
            pyqrcode.create(csr_fingerprint).terminal(quiet_zone=1)
        )

        try:
            with open(csr_path, 'w') as cert_file:
                cert_file.write(csr)
            log.info("Writing CSR file to %s",csr_path)
        except (OSError) as ex:
            log.error("Failed to write CSR file to %s. ERROR: %s", csr_path, ex.message)
            sys.exit(2)

        try:
            with open(priv_path, 'w') as cert_file:
                cert_file.write(priv)
            log.info("Writing private key file to %s", priv_path)
        except (OSError) as ex:
            log.error("Failed to write Private Key file to %s. ERROR: %s", priv_path, ex.message)
            sys.exit(3)


    done = False
    while not done:
        sleep_sec = 60
        try:
            client_cert = client.simpleenroll(csr)
            done = True

            with open(cert_path, 'w') as cert_file:
                cert_file.write(client_cert)
            log.info("Writing client certificate file to %s", cert_path)
            with open(exported_path, 'wb') as export_file:
                export_file.write(export_to_pkcs12(cert_path, priv_path, cacert_path, cli_cfg['export_key']))
            log.info("Exporting client certificate bundle as PKCS12 to %s", exported_path)

        except (TryLater) as ex:
            if not args.wait_for_cert:
                break
            sleep_sec = ex.seconds
        except (RequestError) as ex:
            log.error("Request error to EST simple enroll service. ERROR: %s", ex.message)
        except (IOError, OSError) as ex:
            log.error("Failed to write Certificate file to %s. ERROR: %s", cert_path, ex.message)
            sys.exit(4)

        if not done:
            log.info("Waiting for retry %d seconds.", sleep_sec)
            sleep(sleep_sec)
